# 2일차 정리
# 자료구조 리스트
    # 1. 선형 리스트[ Linear List ] : 예제1 , 예제2
        # 1. 배열 [ ] 사용
        # 2. 인덱스 존재
        # 3. 검색 속도가 빠르다 .
    # 2. 싱글 연결리스트[ Signly Linked List ]  : 예제3 ,  예제4
        # 1. 노드 사용 [ 노드(클래스) 직접 구현 ]
        # 2. 인덱스 x -> link 사용
        # 3. 중간 삽입/삭제 빠르다.
    # 3. 원형 연결리스트[ Circular Linked List ]  : 예제5
        # 1. 싱글 연결리스트 와 매우 유사
        # 2. (차이점) END node like -> START node

# 과제 : 식당 웨이팅 프로그램 구현 [ 버전 : 1.선형리스트 버전  2. 연결리스트 버전 ]
    # 요구사항
        # 식당이 오픈 전
        # 1. 이름 , 전화번호 , 인원수 입력받는다 . [ 현재시간 자동 입력받기 ]
        # 2. 등록된 웨이팅를 리스트에 담는다 .
        # 3. 사용자에게 순서대기 번호 알려준다. [ 인덱스번호 혹은 노드 순서번호 ]
        # 변수 요구 : 이미 시간대 별로 웨이팅 이 존재하는데 중간에 예약이 된다..
        #       어플 예약 : 이름 , 전화번호 , 인원수 , 예약 시간 입력받는다 .
        #       어플 예약 등록 되었을때 예약 시간보다 더 큰 시간은 뒤로 한칸씩 대기번호 증가
        # 4. 관리자가 입장 하면  가장 앞에 있는 순서대기부터 삭제처리 한다. [ 한칸씩 인덱스,노드 당겨짐 ]
        # 예)
        #       강호동 030 3 1:13
        #       신동엽 010 2 2:20
        #                           어플 예약 : 유재석 020 2 1:30
        #       강호동 유재석 신동엽
        # 예)
        #     입장시 강호동부터 입장처리 [ 삭제 ]
        # 5. 1. 웨이팅 등록   2. [관리자]입장
def start() :
    while True :
        select = int( input( ' 1.(손님)대기 등록  2.(손님)어플 대기 등록  3.[관리자]입장 ') )
        if select == 1 :
            print("*(손님) 대기 등록 합니다. *")
            # 코드 작성 [ 함수 ]
        elif select == 2:
            print("*(손님) 어플 대기 등록 합니다. *")
            # 코드 작성 [ 함수 ]
        elif select == 3:
            print("*(관리자) 대기번호 1 입장. *")
            # 코드 작성 [ 함수 ]
        else :
            print("*알수 없는 번호입니다. 다시 입력해주세요~ ")
start()

