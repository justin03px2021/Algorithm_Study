a=101
if a<100:
    print('a<100')
else:
    print('wrong')

for i in [3,7,1,2]:
    print(i)

while True:
    i += 1
    print(i)
    if i == 100:
        break

for i in range(1,101):
    continue #가장 가까운 반복문으로 이동; 밑으로 못감
    print(i)

for i in [1,2,3,4]:
    if i == 1:
       print("11111")
    else:
        continue
    print('굿')

def func():
    a = 10
    print(a)
    a# 5.제어문 if : 특정 조건에 빠른 흐름 제어
    # if 조건 :
    #   참일경우

    # if 조건 :
    #   참 [true ]
    # else :
    #   거짓 [ false ]

    # if 조건1 :
    #   참 [ true ]
    # elif 조건2 :
    #   참2 [ true ]
    # elif 조건3 :
    #   참3 [ true ]
    # else :
    #   거짓 [ false ]

# 1.
a = 99 # a변수에 99 대입
if a < 100 :    # if 조건 :
    print("a변수는 100보다 작다.") # 조건이 참일때
#tab

# 2.
if a< 50 :
    print("a변수는 50보다 작다.")
else:
    print("a변수는 50보다 크다.")
# 3.
if a< 30 :
    print("a변수는 30보다 작다. ")
elif a<70 :
    print("a변수는 70보다 작다. ")
else :
    print("a변수는 70보다 크다. ")

# 6.반복문 for / while
    # for 변수명 in range( 시작값 , 끝값+1 , 증가값 ) :
for i in range( 0 , 3 , 1 ) :   # i 가 0부터 2까지 1씩증가 처리
    print("반복 됩니다." , i )

    # for 변수명 in 리스트
for i in [ 3 , 7 , 1 ] :    # i가 리스트내 하나씩 호출 반복처리
    print("반복 됩니다." , i )

    # while 조건 :
    #   참일때
# while True :            # while True : 무한루프
#     print("무한반복")

반복횟수 = 0
while True :        #무한루프
    반복횟수 += 1    #반복할때마다 1씩 증가 처리
    print("무한루프" , 반복횟수 )
    if 반복횟수 == 100  :
        break       # 가장 가까운 반복문(for,while) 탈출

for i in range( 1 , 100 ) :
    continue        # 가장 가까운 반복문으로 이동
    print("실행")

for name in [ "유재석" , "강호동" , "신동엽"] :
    if name == "강호동" :
        print("강호동 이군요")
    else:
        continue    # 만약에 강호동이 아니면 반복문으로 이동
    print("찾았습니다.") # 유재석 , 신동엽 실행X



# 7.함수  : 함[상자] 수[숫자] : 미리 작성된 코드
    # 목적 : * 코드의 재활용    * 인수에 따른 서로 다른 결과물     * 함수 종료 되면 함수내 메모리 초기화
    # 용어 : 인수[ 함수로 들어가는 수 ] 와 반환[ 함수 밖으로 나오는 수 ]
    # 문법 :
    #   def 함수명( 인수명 , 인수명 ~~ ) :
    #       실행코드
    #       return 데이터

    # 인수O 반환O   / 인수X 반환X  / 인수O 반환X  / 인수X 반환O

    # 예 )
    #       유재석[고객] = 1.함수실행        강호동[핸드폰 A/S]  = 함수
    #                     ---2.인수:고장난 핸드폰--->
    #                                       3. 함수내 코드실행 [ 수리 ]
    #                     <---4.반환:수리된 핸드폰

def 더하기( 인수1 , 인수2 ) :
# 1. 함수 만들기 [ 1. 함수명(임의) , 2.인수선정( 함수로 들어오는 수 ) ]
    결과 = 인수1 + 인수2        # 2. 함수 내에서 실행되는 코드 작성
    return 결과               # 3. 함수가 종료 되었을때 호출했던 곳으로 데이터 주기

계산1 = 더하기( 3 , 5 )
print("계산1 결과 : " , 계산1 )

# 2.
def 함수1() : # 함수 만들기
    지역변수 = 10   # [지역변수]함수 안에서 만들어진 변수는 함수 안에서만 사용가능
    print( "함수1에서 a 값  : " , 지역변수 )
def 함수2() :
    print( "함수2에서 a 값  : " , 전역변수 )
전역변수 = 20 # 함수 밖에서 만들어진 변수는 함수 안에서 사용 가능
# 함수 실행
함수1()
함수2()

# 3.
def 함수3() : # 함수 정의
    global 글로벌변수 #[ 전역변수 ]  global 변수 선언 : 함수 안에서 전역변수 선언시 -> global 키워드
    글로벌변수 = 30
    print(" 함수3에사 글로벌변수 : " , 글로벌변수 )
def 함수4() :
    print(" 함수4에서 글로벌변수 : " , 글로벌변수 )
글로벌변수 = 10  # 전역변수 가 10 이지만 함수3에서 전역변수(global) 30으로 변경했기 때문에
함수3()
함수4()

# 4.
def 함수5( 인수1 , 인수2 ) :          # 1. 함수 정의
    결과  = [ ]                     # 2. 함수내 지역변수 리스트 선언
    계산1 = 인수1 + 인수2
    계산2 = 인수1 - 인수2
    결과.append(계산1)               # 3. 지역변수 리스트에 데이터 추가
    결과.append(계산2)
    return 결과                     # 4. 지역변수 리스트 반환

리스트 = [] # 함수 밖에선 선언된 전역변수 리스트

리스트 = 함수5(  100 , 200 )
print( 리스트 )





















